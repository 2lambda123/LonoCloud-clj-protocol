version: "2.4"

x-service-base: &service-base
  cap_add: [NET_ADMIN, NET_RAW, NET_BROADCAST, NET_BIND_SERVICE, SYS_ADMIN]
  security_opt: [ 'apparmor:unconfined' ] # needed on Ubuntu 18.04
  network_mode: none
  image: clj-protocol-test
  build:
    dockerfile: test/Dockerfile.node
    context: ../
  volumes:
    - ./:/test:ro
    - ../build:/root/app/build:ro
    - ../.shadow-cljs:/root/app/.shadow-cljs:ro

services:
  net:
    image: lonocloud/conlink:20210825_165410-g9c367bc6fc24
    pid: host
    network_mode: none
    cap_add: [SYS_ADMIN, SYS_NICE, NET_ADMIN, NET_BROADCAST]
    security_opt: [ 'apparmor:unconfined' ] # needed on Ubuntu 18.04
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker:/var/lib/docker
      - ./:/test
    command: /sbin/conlink.py --compose-file /test/docker-compose-mac2ip.yaml
    x-network:
      links:
        - left:  {container: svr_1, intf: eth0, ip: 10.1.0.1/16}
          right: {container: net_1, intf: svr}

        - {left: {container: ucli_1,  intf: eth0, ip: 10.1.1.1/16,  mac: "00:00:10:01:07:01"}, right: {container: net_1, intf: uc1}}
        - {left: {container: ucli_2,  intf: eth0, ip: 10.1.1.2/16,  mac: "00:00:10:01:07:02"}, right: {container: net_1, intf: uc2}}
        - {left: {container: ucli_3,  intf: eth0, ip: 10.1.1.3/16,  mac: "00:00:10:01:07:03"}, right: {container: net_1, intf: uc3}}
        - {left: {container: ucli_4,  intf: eth0, ip: 10.1.1.4/16,  mac: "00:00:10:01:07:04"}, right: {container: net_1, intf: uc4}}
        - {left: {container: ucli_5,  intf: eth0, ip: 10.1.1.5/16,  mac: "00:00:10:01:07:05"}, right: {container: net_1, intf: uc5}}
        - {left: {container: ucli_6,  intf: eth0, ip: 10.1.1.6/16,  mac: "00:00:10:01:07:06"}, right: {container: net_1, intf: uc6}}
        - {left: {container: ucli_7,  intf: eth0, ip: 10.1.1.7/16,  mac: "00:00:10:01:07:07"}, right: {container: net_1, intf: uc7}}
        - {left: {container: ucli_8,  intf: eth0, ip: 10.1.1.8/16,  mac: "00:00:10:01:07:08"}, right: {container: net_1, intf: uc8}}
        - {left: {container: ucli_9,  intf: eth0, ip: 10.1.1.9/16,  mac: "00:00:10:01:07:09"}, right: {container: net_1, intf: uc9}}
        - {left: {container: ucli_10, intf: eth0, ip: 10.1.1.10/16, mac: "00:00:10:01:07:0a"}, right: {container: net_1, intf: uc10}}

      mininet-cfg:
        switches:
          - name: s1
        interfaces:
          - {name: svr, node: s1}

          - {name: uc1,  node: s1}
          - {name: uc2,  node: s1}
          - {name: uc3,  node: s1}
          - {name: uc4,  node: s1}
          - {name: uc5,  node: s1}
          - {name: uc6,  node: s1}
          - {name: uc7,  node: s1}
          - {name: uc8,  node: s1}
          - {name: uc9,  node: s1}
          - {name: uc10, node: s1}

  svr:
    <<: *service-base
    command: /root/app/init.sh /root/app/build/mac2ip-server.js --processes 5 --config-file /test/mac2ip.json --if-name eth0 --log-level 2

  ucli:
    <<: *service-base
    scale: 10
    #scale: 1
    command: /root/app/init.sh /root/app/build/dhcp-client.js --unicast --server-ip 10.1.0.1 --if-name eth0 --log-level 2
